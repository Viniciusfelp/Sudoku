// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: sudoku.proto

package sudoku

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SudokuSolver_SolveSudoku_FullMethodName             = "/sudoku.SudokuSolver/SolveSudoku"
	SudokuSolver_SolveSudokuConcurrently_FullMethodName = "/sudoku.SudokuSolver/SolveSudokuConcurrently"
)

// SudokuSolverClient is the client API for SudokuSolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SudokuSolverClient interface {
	SolveSudoku(ctx context.Context, in *SudokuRequest, opts ...grpc.CallOption) (*SudokuResponse, error)
	SolveSudokuConcurrently(ctx context.Context, in *SudokuRequest, opts ...grpc.CallOption) (*SudokuResponse, error)
}

type sudokuSolverClient struct {
	cc grpc.ClientConnInterface
}

func NewSudokuSolverClient(cc grpc.ClientConnInterface) SudokuSolverClient {
	return &sudokuSolverClient{cc}
}

func (c *sudokuSolverClient) SolveSudoku(ctx context.Context, in *SudokuRequest, opts ...grpc.CallOption) (*SudokuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudokuResponse)
	err := c.cc.Invoke(ctx, SudokuSolver_SolveSudoku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sudokuSolverClient) SolveSudokuConcurrently(ctx context.Context, in *SudokuRequest, opts ...grpc.CallOption) (*SudokuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudokuResponse)
	err := c.cc.Invoke(ctx, SudokuSolver_SolveSudokuConcurrently_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SudokuSolverServer is the server API for SudokuSolver service.
// All implementations must embed UnimplementedSudokuSolverServer
// for forward compatibility
type SudokuSolverServer interface {
	SolveSudoku(context.Context, *SudokuRequest) (*SudokuResponse, error)
	SolveSudokuConcurrently(context.Context, *SudokuRequest) (*SudokuResponse, error)
	mustEmbedUnimplementedSudokuSolverServer()
}

// UnimplementedSudokuSolverServer must be embedded to have forward compatible implementations.
type UnimplementedSudokuSolverServer struct {
}

func (UnimplementedSudokuSolverServer) SolveSudoku(context.Context, *SudokuRequest) (*SudokuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveSudoku not implemented")
}
func (UnimplementedSudokuSolverServer) SolveSudokuConcurrently(context.Context, *SudokuRequest) (*SudokuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveSudokuConcurrently not implemented")
}
func (UnimplementedSudokuSolverServer) mustEmbedUnimplementedSudokuSolverServer() {}

// UnsafeSudokuSolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SudokuSolverServer will
// result in compilation errors.
type UnsafeSudokuSolverServer interface {
	mustEmbedUnimplementedSudokuSolverServer()
}

func RegisterSudokuSolverServer(s grpc.ServiceRegistrar, srv SudokuSolverServer) {
	s.RegisterService(&SudokuSolver_ServiceDesc, srv)
}

func _SudokuSolver_SolveSudoku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudokuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SudokuSolverServer).SolveSudoku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SudokuSolver_SolveSudoku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SudokuSolverServer).SolveSudoku(ctx, req.(*SudokuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SudokuSolver_SolveSudokuConcurrently_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudokuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SudokuSolverServer).SolveSudokuConcurrently(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SudokuSolver_SolveSudokuConcurrently_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SudokuSolverServer).SolveSudokuConcurrently(ctx, req.(*SudokuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SudokuSolver_ServiceDesc is the grpc.ServiceDesc for SudokuSolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SudokuSolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sudoku.SudokuSolver",
	HandlerType: (*SudokuSolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolveSudoku",
			Handler:    _SudokuSolver_SolveSudoku_Handler,
		},
		{
			MethodName: "SolveSudokuConcurrently",
			Handler:    _SudokuSolver_SolveSudokuConcurrently_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sudoku.proto",
}
